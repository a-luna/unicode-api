[project]
name = "unicode-api"
version = "0.1.0"
description = "API that provides access to detailed information for all characters, blocks and planes in the Unicode Standard (Built using FastAPI)."
readme = "README.md"
requires-python = ">=3.12"
license = { file = "LICENSE" }
authors = [{ name = "Aaron Luna", email = "contact@aaronluna.dev" }]
keywords = ["unicode", "unicode-api"]
dynamic = ["dependencies", "optional-dependencies"]

[build-system]
requires = ["setuptools", "setuptools-scm"]
build-backend = "setuptools.build_meta"

[tool.setuptools.dynamic]
dependencies = { file = ["requirements.txt"] }
optional-dependencies.dev = { file = ["requirements-dev.txt"] }

[tool.setuptools.packages.find]
where = ["src"]
include = ["unicode_api*"]

[tool.black]
line-length = 120
target-version = ['py312']
include = '\.pyi?$'
exclude = '''
/(
    \.eggs
    | \.git
    | \.hg
    | \.mypy_cache
    | \.pytest_cache
    | \.nox
    | \.tox
    | \.vscode
    | __pycache__
    | _build
    | buck-out
    | build
    | dist
    | venv
)/
'''

[tool.pyright]
typeCheckingMode = "strict"
venvPath = "/Users/aaronluna/Projects/unicode-api"
venv = "venv"
stubPath = "./typings"
include = ["src/unicode_api/**/*.py"]
ignore = [
    "build/**/*",
    "tests/**/*",
    "typings/**/*",
    "noxfile.py",
    "venv/**/*",
]

[tool.ruff]
line-length = 120

[tool.ruff.lint]
select = [
    "B",
    "C4",
    "C90",
    "E",
    "ERA",
    "F",
    "FA",
    "I",
    "INT",
    "N",
    "PERF",
    "PGH",
    "PIE",
    "PLE",
    "PLW",
    "PTH",
    "RUF100",
    "SIM",
    "UP",
    "W",
    "YTT",
]
extend-select = ["I"]
ignore = ["B019", "B905"]
fixable = ["I"]
unfixable = ["B", "C90", "PIE", "SIM"]
exclude = [
    "build/**/*",
]

[tool.ruff.lint.per-file-ignores]
"src/unicode_api/**/__init__.py" = ["F401"]
"src/unicode_api/api/api_v1/dependencies.py" = ["E501"]
"src/unicode_api/data/scripts/update_test_data/update_test_list_all_unicode_blocks.py" = [
    "E501",
]
"src/unicode_api/db/models.py" = ["F401"]
"src/unicode_api/docs/**/*" = ["E501"]
"src/unicode_api/models/{block,character,plane}.py" = ["F821"]
"src/unicode_api/models/property_values.py" = ["N801"]
"src/unicode_api/tasks.py" = ["F401"]
"tests/**/data.py" = ["E501"]
"typings/**/*" = ["F401"]

[tool.isort]
profile = "black"
skip_glob = ["tests/*"]
ensure_newline_before_comments = true
skip_gitignore = true
line_length = 120
multi_line_output = 3
use_parentheses = true
include_trailing_comma = true
force_alphabetical_sort_within_sections = true
color_output = true

[tool.pytest.ini_options]
pythonpath = "./src/"
addopts = "-ra --showlocals --cov=./src/unicode_api --cov-report term:skip-covered --cov-branch --cov-report html -vv --cache-clear --random-order-bucket=package"
norecursedirs = [".git", ".pytest_cache", ".vscode"]

[tool.coverage.run]
source = ["src/unicode_api"]
branch = true
omit = [
    "src/unicode_api/cli.py",
    "src/unicode_api/main.py",
    "src/unicode_api/config/dotenv_file.py",
    "src/unicode_api/core/config/config.py",
    "src/unicode_api/core/logging.py",
    "src/unicode_api/core/redis_client.py",
    "src/unicode_api/core/result.py",
    "src/unicode_api/core/util.py",
    "src/unicode_api/custom_types.py",
    "src/unicode_api/data/scripts/*",
    "src/unicode_api/data/util/*",
    "src/unicode_api/db/types.py",
    "src/unicode_api/docs/*",
    "src/unicode_api/tests/*",
    "src/unicode_api/tasks.py",
]

[tool.coverage.report]
skip_empty = true
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self\\.debug",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "def init_redis",
    "def init_unicode",
]

[tool.coverage.html]
directory = "coverage_html"

[tool.mypy]
python_version = "3.12"
